"use strict";(self.webpackChunkui=self.webpackChunkui||[]).push([[2463],{"./packages/ui/stories/core/slider.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LabelsTooltip:()=>LabelsTooltip,Primary:()=>Primary,RangeSlider:()=>RangeSlider,UnControlledSlider:()=>UnControlledSlider,UsingComponentProps:()=>UsingComponentProps,__namedExportsOrder:()=>__namedExportsOrder,default:()=>slider_stories});var slicedToArray=__webpack_require__("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),objectSpread2=__webpack_require__("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),slider_component=__webpack_require__("./packages/ui/src/core/slider/slider.component.tsx"),label_tooltip=__webpack_require__("./packages/ui/src/core/slider/types/label-tooltip.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),ForwardRefNote=__webpack_require__("./packages/ui/stories/shared/ForwardRefNote.tsx");function _createMdxContent(props){const _components={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,lib.R)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:["\n","\n","\n",(0,jsx_runtime.jsx)(dist.hE,{}),"\n",(0,jsx_runtime.jsx)(dist.Pd,{}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"basic-slider",children:"Basic slider"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:Primary,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"range-slider",children:"Range slider"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"The slider can be used to set the start and end of a range by supplying an array of values to the value prop."}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:RangeSlider,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"customization",children:"Customization"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The slider can be customized using the ",(0,jsx_runtime.jsx)(_components.code,{children:"componentsProps"})," prop."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["If you want to replace the components used for each slot inside the Slider, you can use the ",(0,jsx_runtime.jsx)(_components.code,{children:"components"})," prop."]}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:UsingComponentProps,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"uncontrolled-slider",children:"Uncontrolled slider"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"The slider can be used as an uncontrolled component by supplying a defaultValue prop."}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:UnControlledSlider,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"labels-tooltip",children:"Labels tooltip"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"The slider can be used to show the value of the slider as a tooltip."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Supports three modes:"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsxs)(_components.li,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"auto"}),": The tooltip is shown when the slider is hovered or focused."]}),"\n",(0,jsx_runtime.jsxs)(_components.li,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"on"}),": The tooltip is always shown."]}),"\n",(0,jsx_runtime.jsxs)(_components.li,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"off"}),": The tooltip is never shown."]}),"\n"]}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:LabelsTooltip,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"api",children:"API"}),"\n",(0,jsx_runtime.jsx)(dist.ov,{sort:"alpha"}),"\n",(0,jsx_runtime.jsx)(ForwardRefNote.A,{})]})}const slider_stories={title:"Inputs/Sliders/Slider",component:slider_component.A,tags:["autodocs"],parameters:{docs:{page:function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)},subtitle:"Sliders allow users to select a value from a range of values."}},argTypes:{components:{description:"To replace components used for each slot inside the Slider:\t`{ Rail?: React.ElementType, Track?: React.ElementType, `<br />` Thumb?: React.ElementType, LabelTooltip?: React.ElementType }`"},componentsProps:{description:"Props passed to each slot inside the Slider:\t`{ rail?: object, thumb?: object; track?: object, labelTooltip?: object }`"},value:{description:"The value of the slider."},labelTooltip:{description:"Show the current value of the slider in a tooltip."},annotation:{description:"The unit of the slider."},hideAnnotation:{description:"Hide the annotation of the slider."},hideTrack:{description:"Hide the track of the slider."},min:{description:"The minimum value of the slider."},max:{description:"The maximum value of the slider."},step:{description:"The step value of the slider."},defaultValue:{description:"The default value of the slider."},onChange:{description:"The callback function that is called when the slider value changes."},onMouseDown:{description:"The callback function that is called when the slider is clicked."},onMouseUp:{description:"The callback function that is called when the slider is released."},disabled:{description:"if true, the slider is disabled."},disableSwap:{description:"If true, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb."}}};var defaultArgs={annotation:"MB",min:0,max:200,step:1,labelTooltip:label_tooltip.E.Auto},Primary={args:(0,objectSpread2.A)((0,objectSpread2.A)({},defaultArgs),{},{value:35}),render:function render(args){var _useState=(0,react.useState)(args.value),_useState2=(0,slicedToArray.A)(_useState,2),value=_useState2[0],setValue=_useState2[1];return react.createElement(slider_component.A,Object.assign({},args,{value,onChange:function handleChange(_,newValue){setValue(newValue)},style:{width:"350px",marginTop:"20px",marginLeft:"10px"}}))}},RangeSlider={args:(0,objectSpread2.A)((0,objectSpread2.A)({},defaultArgs),{},{value:[20,45],labelTooltip:label_tooltip.E.On}),render:Primary.render},UsingComponentProps={args:(0,objectSpread2.A)((0,objectSpread2.A)({},defaultArgs),{},{value:50}),render:function render(args){var _useState3=(0,react.useState)(args.value),_useState4=(0,slicedToArray.A)(_useState3,2),value=_useState4[0],setValue=_useState4[1],color="rgb(177, 54, 54)";return react.createElement(slider_component.A,Object.assign({},args,{value,onChange:function handleChange(_,newValue){setValue(newValue)},style:{width:"350px",marginTop:"20px",marginLeft:"10px"},componentsProps:{rail:{style:{background:color}},track:{style:{background:color,border:"1px solid ".concat(color)}},thumb:{style:{border:"2px solid ".concat(color),background:"rgb(255, 255, 255)"}},labelTooltip:{style:{background:color}}}}))}},UnControlledSlider={args:(0,objectSpread2.A)((0,objectSpread2.A)({},defaultArgs),{},{defaultValue:30}),render:function render(args){return react.createElement(slider_component.A,Object.assign({},args,{defaultValue:args.defaultValue,style:{width:"350px",marginTop:"20px",marginLeft:"10px"}}))}},LabelsTooltip={args:(0,objectSpread2.A)((0,objectSpread2.A)({},defaultArgs),{},{defaultValue:30}),render:function render(args){var _useState5=(0,react.useState)(args.value),_useState6=(0,slicedToArray.A)(_useState5,2),value=_useState6[0],setValue=_useState6[1],handleChange=function handleChange(_,newValue){setValue(newValue)};return react.createElement("div",{style:{width:"350px"}},react.createElement(slider_component.A,Object.assign({},args,{value,onChange:handleChange})),react.createElement(slider_component.A,Object.assign({},args,{value,onChange:handleChange,labelTooltip:label_tooltip.E.On})),react.createElement(slider_component.A,Object.assign({},args,{value,onChange:handleChange,labelTooltip:label_tooltip.E.Off})))}};const __namedExportsOrder=["Primary","RangeSlider","UsingComponentProps","UnControlledSlider","LabelsTooltip"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs,\n    value: 35\n  },\n  render: args => {\n    const [value, setValue] = useState<number | number[] | undefined>(args.value);\n    const handleChange = (_: any, newValue: number | number[]): void => {\n      setValue(newValue);\n    };\n    return <Slider {...args} value={value} onChange={handleChange} style={{\n      width: '350px',\n      marginTop: '20px',\n      marginLeft: '10px'\n    }} />;\n  }\n}",...Primary.parameters?.docs?.source}}},RangeSlider.parameters={...RangeSlider.parameters,docs:{...RangeSlider.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs,\n    value: [20, 45],\n    labelTooltip: LabelTooltip.On\n  },\n  render: Primary.render\n}",...RangeSlider.parameters?.docs?.source}}},UsingComponentProps.parameters={...UsingComponentProps.parameters,docs:{...UsingComponentProps.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs,\n    value: 50\n  },\n  render: args => {\n    const [value, setValue] = useState<number | number[] | undefined>(args.value);\n    const handleChange = (_: any, newValue: number | number[]): void => {\n      setValue(newValue);\n    };\n    const color = 'rgb(177, 54, 54)';\n    return <Slider {...args} value={value} onChange={handleChange} style={{\n      width: '350px',\n      marginTop: '20px',\n      marginLeft: '10px'\n    }} componentsProps={{\n      rail: {\n        style: {\n          background: color\n        }\n      },\n      track: {\n        style: {\n          background: color,\n          border: `1px solid ${color}`\n        }\n      },\n      thumb: {\n        style: {\n          border: `2px solid ${color}`,\n          background: 'rgb(255, 255, 255)'\n        }\n      },\n      labelTooltip: {\n        style: {\n          background: color\n        }\n      }\n    }} />;\n  }\n}",...UsingComponentProps.parameters?.docs?.source}}},UnControlledSlider.parameters={...UnControlledSlider.parameters,docs:{...UnControlledSlider.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs,\n    defaultValue: 30\n  },\n  render: args => <Slider {...args} defaultValue={args.defaultValue} style={{\n    width: '350px',\n    marginTop: '20px',\n    marginLeft: '10px'\n  }} />\n}",...UnControlledSlider.parameters?.docs?.source}}},LabelsTooltip.parameters={...LabelsTooltip.parameters,docs:{...LabelsTooltip.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs,\n    defaultValue: 30\n  },\n  render: args => {\n    const [value, setValue] = useState<number | number[] | undefined>(args.value);\n    const handleChange = (_: any, newValue: number | number[]): void => {\n      setValue(newValue);\n    };\n    return <div style={{\n      width: '350px'\n    }}>\r\n        <Slider {...args} value={value} onChange={handleChange} />\r\n        <Slider {...args} value={value} onChange={handleChange} labelTooltip={LabelTooltip.On} />\r\n        <Slider {...args} value={value} onChange={handleChange} labelTooltip={LabelTooltip.Off} />\r\n      </div>;\n  }\n}",...LabelsTooltip.parameters?.docs?.source}}}}}]);