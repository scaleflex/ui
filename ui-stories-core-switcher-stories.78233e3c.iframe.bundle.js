"use strict";(self.webpackChunkui=self.webpackChunkui||[]).push([[1369],{"./packages/ui/stories/core/switcher.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,Sizes:()=>Sizes,WithChildren:()=>WithChildren,__namedExportsOrder:()=>__namedExportsOrder,default:()=>switcher_stories});var slicedToArray=__webpack_require__("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),objectSpread2=__webpack_require__("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),react=__webpack_require__("./node_modules/react/index.js"),switcher_size=__webpack_require__("./packages/ui/src/core/switcher/switcher-size.ts"),switcher_component=__webpack_require__("./packages/ui/src/core/switcher/switcher.component.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/node_modules/@storybook/blocks/dist/index.mjs"),ForwardRefNote=__webpack_require__("./packages/ui/stories/shared/ForwardRefNote.tsx");function _createMdxContent(props){const _components={h2:"h2",p:"p",...(0,lib.R)(),...props.components};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:["\n","\n","\n",(0,jsx_runtime.jsx)(dist.hE,{}),"\n",(0,jsx_runtime.jsx)(dist.Pd,{}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"basic-switcher",children:"Basic switcher"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:Primary,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"sizes",children:"Sizes"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Use the size prop to change the size of the switcher."}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"text-inside-the-switcher",children:"Text inside the switcher"}),"\n",(0,jsx_runtime.jsx)(dist.Hl,{of:WithChildren,withToolbar:!0,layout:"centered"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"api",children:"API"}),"\n",(0,jsx_runtime.jsx)(dist.ov,{sort:"alpha"}),"\n",(0,jsx_runtime.jsx)(ForwardRefNote.A,{})]})}const switcher_stories={title:"Inputs/Switcher",component:switcher_component.A,tags:["autodocs"],parameters:{docs:{page:function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)},subtitle:"Switcher is a component that displays a switcher."}},argTypes:{size:{description:"The size of the switcher. `sm` or `md`",options:Object.values(switcher_size.J),control:{type:"select"}},checked:{description:"if true, the switcher is checked"},readOnly:{description:"if true, the switcher is read only"},disabled:{description:"if true, the switcher is disabled"},onChange:{description:"The event handler for the switcher change event."},switcherProps:{description:"The props for the switcher input element."},SwitcherPropsData:{description:"The props for the switcher wrapper element."},children:{description:"if you want to display a text inside the switcher, you can pass it as a child."}}};var defaultArgs={checked:!1,readOnly:!1,disabled:!1,size:switcher_size.J.Md},Primary={args:(0,objectSpread2.A)({},defaultArgs),render:function render(args){var _useState=(0,react.useState)(!1),_useState2=(0,slicedToArray.A)(_useState,2),checkedState=_useState2[0],setCheckedState=_useState2[1];return react.createElement(switcher_component.A,Object.assign({},args,{checked:checkedState,onChange:function onChange(event){setCheckedState(event.target.checked)}}))}},WithChildren={args:(0,objectSpread2.A)({},defaultArgs),render:function render(args){var _useState3=(0,react.useState)(!1),_useState4=(0,slicedToArray.A)(_useState3,2),checkedState=_useState4[0],setCheckedState=_useState4[1];return react.createElement(switcher_component.A,Object.assign({},args,{checked:checkedState,onChange:function onChange(event){setCheckedState(event.target.checked)}}),checkedState?"on":"off")}},Sizes={args:(0,objectSpread2.A)((0,objectSpread2.A)({},defaultArgs),{},{size:switcher_size.J.Sm}),render:function render(args){var _useState5=(0,react.useState)(!1),_useState6=(0,slicedToArray.A)(_useState5,2),checkedSm=_useState6[0],setCheckedSm=_useState6[1],_useState7=(0,react.useState)(!1),_useState8=(0,slicedToArray.A)(_useState7,2),checkedMd=_useState8[0],setCheckedMd=_useState8[1];return react.createElement("div",{style:{display:"flex",alignItems:"center",gap:"10px"}},react.createElement(switcher_component.A,Object.assign({},args,{checked:checkedSm,onChange:function onChange(event){setCheckedSm(event.target.checked)}})),react.createElement(switcher_component.A,Object.assign({},args,{checked:checkedMd,size:switcher_size.J.Md,onChange:function onChange(event){setCheckedMd(event.target.checked)}})))}};const __namedExportsOrder=["Primary","WithChildren","Sizes"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs\n  },\n  render: args => {\n    const [checkedState, setCheckedState] = useState(false);\n    return <Switcher {...args} checked={checkedState} onChange={event => {\n      setCheckedState(event.target.checked);\n    }} />;\n  }\n}",...Primary.parameters?.docs?.source}}},WithChildren.parameters={...WithChildren.parameters,docs:{...WithChildren.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs\n  },\n  render: args => {\n    const [checkedState, setCheckedState] = useState(false);\n    return <Switcher {...args} checked={checkedState} onChange={event => {\n      setCheckedState(event.target.checked);\n    }}>\n        {checkedState ? 'on' : 'off'}\n      </Switcher>;\n  }\n}",...WithChildren.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultArgs,\n    size: SwitcherSize.Sm\n  },\n  render: args => {\n    const [checkedSm, setCheckedSm] = useState(false);\n    const [checkedMd, setCheckedMd] = useState(false);\n    return <div style={{\n      display: 'flex',\n      alignItems: 'center',\n      gap: '10px'\n    }}>\n        <Switcher {...args} checked={checkedSm} onChange={event => {\n        setCheckedSm(event.target.checked);\n      }} />\n        <Switcher {...args} checked={checkedMd} size={SwitcherSize.Md} onChange={event => {\n        setCheckedMd(event.target.checked);\n      }} />\n      </div>;\n  }\n}",...Sizes.parameters?.docs?.source}}}}}]);